// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String    @unique
  price       PRICE
  items       Item[]
  reviews     Review[]
  // In case of one-to-one relations
  // location    Location?
  locationId  Int
  location    Location  @relation(fields: [locationId], references: [id])
  cuisineId   Int
  cuisine     Cuisine   @relation(fields: [cuisineId], references: [id])
  bookings    Booking[]
  tables      Table[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model Item {
  id           Int        @id @default(autoincrement())
  name         String
  price        String
  description  String
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  // In case of one-to-one relations
  // restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  // restaurantId Int        @unique
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  city       String
  password   String
  email      String   @unique
  phone      String
  reviews    Review[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Review {
  id           Int         @id @default(autoincrement())
  first_name   String
  last_name    String
  text         String
  rating       Float
  userId       Int?
  User         User?       @relation(fields: [userId], references: [id])
  restaurantId Int?
  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
}

model Booking {
  id                Int             @id @default(autoincrement())
  number_of_people  Int
  booking_time      DateTime
  booker_email      String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_occasion   String?
  booker_request    String?
  restaurant        Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId      Int
  tables            Booking_Table[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model Table {
  id           Int             @id @default(autoincrement())
  seats        Int
  restaurant   Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  bookings     Booking_Table[]
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
}

model Booking_Table {
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  Int
  table      Table    @relation(fields: [tableId], references: [id])
  tableId    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([bookingId, tableId])
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
